<EditForm Model="Chapter" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    @* CHAPTER TITLE *@
    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Chapter.Title" />
            <ValidationMessage For="@(() => Chapter.Title)" />
        </div>
    </div>

    @* PROJECT IMAGE *@
    <UploadImage Label="Main Image:" OnSelectedImage="OnSelectedImage" ImageURL="@imageURL" />

    @* CHAPTER DESCRIPTION *@
    <div class="form-group">
        <label>Description:</label>
        <div>
            <InputTextArea class="form-control" @bind-Value="@Chapter.Description" />
            <ValidationMessage For="@(() => Chapter.Description)" />
        </div>
    </div>

    @* CHAPTER EVENT *@
    <div class="form-group">
        <label>Event Details:</label>
        <div>
            <InputTextArea class="form-control" @bind-Value="@Chapter.Event" />
            <ValidationMessage For="@(() => Chapter.Event)" />
        </div>
    </div>

    @* CHAPTER HELP *@
    <div class="form-group">
        <label>Help Details:</label>
        <div>
            <InputTextArea class="form-control" @bind-Value="@Chapter.Help" />
            <ValidationMessage For="@(() => Chapter.Help)" />
        </div>
    </div>

    <button class="btn btn-success" type="submit">Save Chapter</button>
</EditForm>

@code {
    [Parameter] public Chapter Chapter { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    string imageURL;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Chapter.Image))
        {
            imageURL = Chapter.Image;
            Chapter.Image = null; /*Stops the image from being sent if hasn't been changed*/
        }
    }

    private void OnSelectedImage(string imageBase64)
    {
        Chapter.Image = imageBase64;
    }

    private async Task OnDataAnnotationsValidated()
    {
        if (!string.IsNullOrWhiteSpace(Chapter.Image))
        {
            imageURL = null;
        }

        await OnValidSubmit.InvokeAsync(null);
    }
}
