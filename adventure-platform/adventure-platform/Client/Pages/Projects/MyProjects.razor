@page "/myprojects"
@inject NavigationManager navigationManager
@inject IAdventureRepository adventureRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<AdventureList Adventures="adventures" ProjectContext="@true" Context="@context" />

@if (numPages > 1)
{
    <Pagination CurrentPage="@_UserProjectsDTO.Page" NumPages="numPages" SelectPage="SelectPage" />
}

@code {

    #region ##### HEAD #####
    private const string context = "myprojects";

    private UserProjectsDTO _UserProjectsDTO = new UserProjectsDTO() { NumPerPage = 11 };
    private List<Adventure> adventures;
    private int numPages; // Returned from paginatedResponse calculation;

    #endregion

    #region ##### LIFE CYCLE METHODS #####

    protected async override Task OnInitializedAsync()
    {
        await SelectPage(1);
    }

    #endregion

    #region ##### CALLBACK METHODS #####

    private async Task SelectPage(int page)
    {
        /// TODO: !!!!! INSECURE !!!!!
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _UserProjectsDTO.UserEmail = user.Identity.Name;

        _UserProjectsDTO.Page = page;

        try
        {
            await FilterAdventures(_UserProjectsDTO);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task FilterAdventures(UserProjectsDTO userProjectsDTO)
    {
        _UserProjectsDTO = userProjectsDTO;

        var paginatedResponse = await adventureRepository.GetUserProjects(userProjectsDTO);
        adventures = paginatedResponse.Response;
        numPages = paginatedResponse.NumPages;
    }

    #endregion

    #region ##### NAVIGATION #####

    private void NavCreateProject()
    {
        navigationManager.NavigateTo($"createproject");
    }

    #endregion

}
