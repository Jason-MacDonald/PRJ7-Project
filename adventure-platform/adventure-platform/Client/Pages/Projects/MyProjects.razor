@page "/myprojects"

@inject IAdventureRepository adventureRepository

@inject NavigationManager navigationManager

@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>

    @* USER IS LOGGED IN *@
    <Authorized>

        <div>
            @* ADVENTURE LIST *@
            <AdventureList Adventures="_Adventures" ProjectContext="@true" ContextString="@CONTEXT_STRING" />

            @* PAGINATION *@
            @if (_NumPages > 1)
            {
                <Pagination CurrentPage="@_UserProjectsDTO.Page" NumPages="_NumPages" SelectPage="SelectPage" />
            }
        </div>

    </Authorized>

    @* USER IS NOT LOGGED IN *@
    <NotAuthorized>

        <p>You must be logged in to access your projects.</p>
        <LoginForm />

    </NotAuthorized>

</AuthorizeView>



@code {

    #region ##### HEAD #####

    private const string CONTEXT_STRING = "myprojects";

    private UserProjectsDTO _UserProjectsDTO = new UserProjectsDTO() { NumPerPage = 11 }; // Overwrite to allow create button.
    private List<Adventure> _Adventures;
    private int _NumPages; // Returned from paginatedResponse calculation;

    #endregion

    #region ##### LIFE CYCLE METHODS #####

    protected async override Task OnInitializedAsync()
    {
        await SelectPage(1);
    }

    #endregion

    #region ##### CRUD METHODS #####

    private async Task SelectPage(int page)
    {
        // TODO: Horrible!
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _UserProjectsDTO.UserEmail = user.Identity.Name;
        _UserProjectsDTO.Page = page;

        try
        {
            await FilterAdventures();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("MPJ001: Unable to Get Filtered Adventures.");
        }
    }

    public async Task FilterAdventures()
    {
        try
        {
            var paginatedResponse = await adventureRepository.GetUserProjects(_UserProjectsDTO);
            _Adventures = paginatedResponse.Response;
            _NumPages = paginatedResponse.NumPages;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("MPS002: Unable to Filter Adventures.");
        }
    }

    #endregion

    #region ##### NAVIGATION #####

    private void NavCreateProject()
    {
        navigationManager.NavigateTo($"createproject");
    }

    #endregion

}
