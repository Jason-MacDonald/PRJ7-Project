@page "/genres"

@inject IGenreRepository genreRepository

@attribute [Authorize]

<h3>Genres</h3>

<AuthorizeView Roles="Admin">
    <Authorized>

        @* ##### GENRE LIST #####*@
        <GenericList List="_GenreList">
            <ListTemplate>

                <table class="table table-striped">

                    @* TABLE HEADER *@
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th></th>
                        </tr>
                    </thead>

                    @* GENRE TABLE *@
                    <tbody>
                        @foreach (var item in _GenreList)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>

                                    @* EDIT BUTTON *@
                                    <a class="btn btn-success">Edit</a>

                                    @* DELETE BUTTON *@
                                    <button class="btn btn-danger" @onclick="@(() => DeleteGenre(item.ID))">Delete</button>

                                </td>
                            </tr>
                        }
                    </tbody>

                </table>

            </ListTemplate>
        </GenericList>

        @* ##### GENRE FORM #####*@
        <GenreForm Genre="_Genre" OnValidSubmit="CreateGenre" />

    </Authorized>
</AuthorizeView>

@code {

    #region ##### HEAD #####

    private Genre _Genre = new Genre();
    private List<Genre> _GenreList;

    #endregion

    #region ##### LIFECYCLE METHODS #####

    protected override async Task OnInitializedAsync()
    {
        await GetGenres();
    }

    #endregion

    #region ##### CRUD METHODS #####

    private async Task GetGenres()
    {
        try
        {
            _GenreList = await genreRepository.GetGenres();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("GEN001: Unable to Retrieve Genres.");
        }
    }

    private async Task CreateGenre()
    {
        try
        {
            await genreRepository.CreateGenre(_Genre);
            _Genre.Name = "";

            await GetGenres();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("GEN002: Unable to Create Genre.");
        }
    }

    private async Task DeleteGenre(int id)
    {
        try
        {
            await genreRepository.DeleteGenre(id);
            await GetGenres();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("GEN003: Unable to Delete Genre.");
        }
    }

    #endregion

}
