@inject IAdventureRepository adventureRepository
@inject IUserFavouriteRepository userFavouriteRepository

@inject IJSRuntime js
@inject NavigationManager navigationManager
@inject IToastService toastService

@inject AuthenticationStateProvider AuthenticationStateProvider

<Confirmation @ref="_Confirmation" OnConfirm="@OnConfirm" OnCancel="@OnCancel">
    <div>Are you sure you want to delete @_SelectedAdventure.Title?</div>
</Confirmation>

<div class="adventures-container">

    @* CREATE PROJECT BUTTON *@
    @if (ProjectContext)
    {
        <button class="btn btn-info mr-3 create-project-button" @onclick="NavCreateProject">Create New Project</button>
    }

    @* ADVENTURE LIST *@
    <GenericList List="Adventures">

        <ElementTemplate>
            <AdventureCard @key="context.ID" Adventure="context" DeleteAdventure="DeleteAdventure" ContextString="@ContextString" DeleteFromLibrary="DeleteFromLibrary" />
        </ElementTemplate>

        @* Fragment defines what to show if there are no projects. *@
        <EmptyTemplate>
            <p>There are no projects to show.</p>
        </EmptyTemplate>

    </GenericList>
</div>

@code {

    #region ##### HEAD #####

    private Confirmation _Confirmation;

    [Parameter] public EventCallback<int> Refresh { get; set; }
    [Parameter] public string ContextString { get; set; }
    [Parameter] public List<Adventure> Adventures { get; set; }
    [Parameter] public bool ProjectContext { get; set; }

    private Adventure _SelectedAdventure;

    #endregion

    #region ##### CRUD METHODS #####

    private void DeleteAdventure(Adventure adventure)
    {
        _SelectedAdventure = adventure;
        _Confirmation.Show();
    }

    private async Task OnConfirm()
    {
        try
        {
            await adventureRepository.DeleteAdventure(_SelectedAdventure.ID);
            Adventures.Remove(_SelectedAdventure);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ADL001: Unable to Delete Adventure User.");
        }

        _Confirmation.Hide();
        _SelectedAdventure = null;
    }

    private void OnCancel()
    {
        _Confirmation.Hide();
        _SelectedAdventure = null;
    }

    private async Task DeleteFromLibrary(int adventureID)
    {
        //TODO: Yuck.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;

        UserFavourite userFavourite = new UserFavourite()
        {
            UserID = userEmail,
            AdventureID = adventureID
        };

        try
        {
            await userFavouriteRepository.DeleteUserFavourite(userFavourite);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ADL002: Unable to Delete From Library.");
        }

        await Refresh.InvokeAsync(1);

        toastService.ShowInfo("Adventure has been removed from library.");
    }

    #endregion

    #region ##### NAVIGATION METHODS #####

    private void NavCreateProject()
    {
        navigationManager.NavigateTo($"createproject");
    }

    #endregion

}
