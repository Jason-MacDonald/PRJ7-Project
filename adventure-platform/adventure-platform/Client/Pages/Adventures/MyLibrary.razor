@page "/mylibrary"

@inject IAdventureRepository adventureRepository;

@inject AuthenticationStateProvider AuthenticationStateProvider

@*@attribute [Authorize]*@

<AuthorizeView>

    @* USER IS LOGGED IN *@
    <Authorized>

        <AdventureList Adventures="_Adventures" ContextString="@CONTEXT_STRING" Refresh="SelectPage" />

        @if (_NumPages > 1)
        {
            <Pagination CurrentPage="@_UserFavouritesDTO.Page" NumPages="_NumPages" SelectPage="SelectPage" />
        }

    </Authorized>

    @* USER IS NOT LOGGED IN *@
    <NotAuthorized>

        <p>You must be logged in to view your library.</p>

        <LoginForm />

    </NotAuthorized>

</AuthorizeView>


@code {

    #region ##### HEAD #####

    private const string CONTEXT_STRING = "mylibrary";

    private string _UserEmail;
    private UserFavouritesDTO _UserFavouritesDTO = new UserFavouritesDTO();
    private List<Adventure> _Adventures;
    private int _NumPages; // Returned from paginatedResponse calculation;

    #endregion

    #region ##### LIFE CYCLE METHODS #####

    protected async override Task OnInitializedAsync()
    {
        await GetAuthState();
        await SelectPage(1);
    }

    #endregion

    #region ##### AUTHENTICATION #####

    private async Task GetAuthState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _UserEmail = authState.User.Identity.Name;
    }

    #endregion

    #region ##### CALLBACK METHODS #####

    private async Task SelectPage(int page)
    {
        _UserFavouritesDTO.UserEmail = _UserEmail;
        _UserFavouritesDTO.Page = page;

        await FilterAdventures();
    }

    #endregion

    #region ##### CRUD METHODS #####

    public async Task FilterAdventures()
    {
        try
        {
            var paginatedResponse = await adventureRepository.GetUserFavourites(_UserFavouritesDTO);
            _Adventures = paginatedResponse.Response;
            _NumPages = paginatedResponse.NumPages;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("MLY001: Unable to Retrieve User Favourites.");
        }
    }

    #endregion

}
