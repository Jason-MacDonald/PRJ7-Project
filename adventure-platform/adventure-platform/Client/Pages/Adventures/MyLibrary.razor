@page "/mylibrary"
@inject IAdventureRepository adventureRepository;
@*@attribute [Authorize]*@
@inject AuthenticationStateProvider AuthenticationStateProvider
@*<AdventureFilter OnSubmit="FilterAdventures" />*@

<AuthorizeView>

    <Authorized>
        <AdventureList Adventures="adventures" ContextString="@contextString" Refresh="SelectPage" />

        @if (numPages > 1)
        {
            <Pagination CurrentPage="@_UserFavouritesDTO.Page" NumPages="numPages" SelectPage="SelectPage" />
        }
    </Authorized>

    <NotAuthorized>
        <p>You must be logged in to view your library.</p>

        <LoginForm />
    </NotAuthorized>

</AuthorizeView>


@code {

    #region ##### HEAD #####
    private const string contextString = "mylibrary";

    private UserFavouritesDTO _UserFavouritesDTO = new UserFavouritesDTO();
    private List<Adventure> adventures;
    private int numPages; // Returned from paginatedResponse calculation;

    #endregion

    #region ##### LIFE CYCLE METHODS #####

    protected async override Task OnInitializedAsync()
    {
        await SelectPage(1);
    }

    #endregion

    #region ##### CALLBACK METHODS #####

    private async Task SelectPage(int page)
    {
        /// TODO: !!!!! INSECURE !!!!!
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _UserFavouritesDTO.UserEmail = user.Identity.Name;

        _UserFavouritesDTO.Page = page;

        try
        {
            await FilterAdventures(_UserFavouritesDTO);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task FilterAdventures(UserFavouritesDTO userFavouritesDTO)
    {
        _UserFavouritesDTO = userFavouritesDTO;

        var paginatedResponse = await adventureRepository.GetUserFavourites(userFavouritesDTO);
        adventures = paginatedResponse.Response;
        numPages = paginatedResponse.NumPages;
    }

    #endregion

}
