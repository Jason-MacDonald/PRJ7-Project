@page "/adventures"

@inject IAdventureRepository adventureRepository

<AdventureFilter OnSubmit="FilterAdventures" />

<AdventureList Adventures="_Adventures" ContextString="@CONTEXT_STRING" />

@if (_NumPages > 1)
{
    <Pagination CurrentPage="@_AdventureFilterDTO.Page" NumPages="_NumPages" SelectPage="SelectPage" />
}

@code {

    #region ##### HEAD #####

    private const string CONTEXT_STRING = "adventures";

    private AdventureFilterDTO _AdventureFilterDTO = new AdventureFilterDTO();
    private List<Adventure> _Adventures;
    private int _NumPages; // Returned from paginatedResponse calculation;

    #endregion

    #region ##### LIFE CYCLE METHODS #####

    protected async override Task OnInitializedAsync()
    {
        await SelectPage(1);
    }

    #endregion

    #region ##### GENERAL METHODS

    private async Task SelectPage(int page)
    {
        _AdventureFilterDTO.Page = page;

        await FilterAdventures(_AdventureFilterDTO);
    }

    #endregion

    #region ##### CRUD METHODS #####

    public async Task FilterAdventures(AdventureFilterDTO adventureFilterDTO)
    {
        _AdventureFilterDTO = adventureFilterDTO;

        try
        {
            var paginatedResponse = await adventureRepository.GetFilteredAdventures(_AdventureFilterDTO);
            _Adventures = paginatedResponse.Response;
            _NumPages = paginatedResponse.NumPages;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ACC001: Unable to Retrieve Adventures");
        }
    }

    #endregion

}
