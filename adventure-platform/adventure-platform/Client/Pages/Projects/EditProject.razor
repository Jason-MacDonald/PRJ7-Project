@page "/editproject/{ProjectID:int}"
@inject NavigationManager navigationManager
@inject IAdventureRepository adventureRepository
@inject IChapterRepository chapterRepository

<h3>Edit Project</h3>

@if (adventure != null)
{
    <div class="row">
        <div class="left-column">
            <ProjectForm Project="adventure" OnValidSubmit="SaveProject" NotSelectedGenres="notSelectedGenreList" SelectedGenres="selectedGenreList" />
        </div>

        <div class="right-column">
            <div class="form-group">
                @foreach (var chapter in chapterList)
                {
                    <div class="d-flex">
                        <button class="btn btn-warning flex-grow-1 mb-2" @onclick="@(() => NavEditChapter(chapter.ID))">Edit @chapter.Title</button>
                        <button class="btn btn-danger ml-2 mb-2" @onclick="@(() => DeleteChapter(chapter.ID))"><span class="oi oi-trash" aria-hidden="true"></span></button>
                    </div>
                }
                <a class="btn btn-info btn-block" @onclick="NavCreateChapter">Create New Chapter</a>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public int ProjectID { get; set; }

    Adventure adventure;
    List<Genre> notSelectedGenreList;
    List<Genre> selectedGenreList;
    List<Chapter> chapterList;

    protected async override Task OnInitializedAsync()
    {
        var model = await adventureRepository.GetAdventureUpdateDTO(ProjectID);
        adventure = model.Adventure;
        notSelectedGenreList = model.NotSelectedGenreList;
        selectedGenreList = model.SelectedGenreList;
        chapterList = model.ChapterList;
    }

    private async Task SaveProject()
    {
        await adventureRepository.UpdateAdventure(adventure);
    }

    #region ##### NAVIGATION #####

    private void NavCreateChapter()
    {
        navigationManager.NavigateTo($"createchapter/{ProjectID}");
    }

    private void NavEditChapter(int id)
    {
        navigationManager.NavigateTo($"editchapter/{id}");
    }

    #endregion

    private async Task DeleteChapter(int id)
    {
        try
        {
            await chapterRepository.DeleteChapter(id);
            chapterList = await chapterRepository.GetChapters(adventure.ID);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
