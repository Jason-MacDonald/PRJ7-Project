@inject IUserFavouriteRepository userFavouriteRepository
@inject IAdventureRepository adventureRepository

@inject NavigationManager navigationManager
@inject IToastService toastService

@inject AuthenticationStateProvider AuthenticationStateProvider
@* CARD CONTAINER *@
<div class="individual-adventure-container shadow mb-4 bg-white">

    <div>

        @* CARD HEADER *@
        <div class="individual-adventure-header">
            <h5 class="pt-4 px-3">@Adventure.Title</h5>
            <p class="pb-3 px-3"><i>@Adventure.Author</i></p>
        </div>

        @* CARD IMAGE *@
        @if (Adventure.Image != null)
        {
            <a @onclick="NavAdventureDetails"
               data-toggle="tooltip" title="Find out more">
                <img src="@Adventure.Image"
                     class="adventure-image" />
            </a>
        }

        @* CARD DESCRIPTION *@
        <p class="px-3">@Adventure.Description</p>

    </div>

    <div>
        <div class="px-3 pb-3">

            @* PLAY BUTTON *@
            <a class="btn btn-success" @onclick="NavPlay"
               data-toggle="tooltip" title="Play @Adventure.Title">
                <span class="oi oi-media-play" aria-hidden="true" />
            </a>

            @* ADD TO LIBRARY BUTTON *@
            <AuthorizeView>
                <Authorized>

                    @if (ContextString == "adventures")
                    {
                        <a class="btn btn-info" @onclick="AddToLibrary"
                           data-toggle="tooltip" title="Add @Adventure.Title to your library">
                            <span class="oi oi-plus" aria-hidden="true" />
                        </a>
                    }

                </Authorized>
            </AuthorizeView>

            @* DELETE FROM LIBRARY BUTTON *@
            @if (ContextString == "mylibrary")
            {
                <a class="btn btn-warning" @onclick="@(() => DeleteFromLibrary.InvokeAsync(Adventure.ID))"
                   data-toggle="tooltip" title="Delete @Adventure.Title from your library">
                    <span class="oi oi-minus" aria-hidden="true" />
                </a>
            }

            @* TODO: Work out what my thinking was here. *@
            @if (ContextString == "myprojects")
            {

            }

            @* PROJECT BUTTONS *@
            <AuthorizeView>
                <Authorized>

                    @if (ContextString == "myprojects")
                    {
                        @if (_UserEmail == Adventure.Author)
                        {
                            <div class="float-right">

                                @* EDIT PROJECT BUTTON *@
                                <a class="btn btn-warning" @onclick="NavEditProject"
                                   data-toggle="tooltip" title="Edit @Adventure.Title">
                                    <span class="oi oi-pencil" aria-hidden="true" />
                                </a>

                                @* DELETE PROJECT BUTTON *@
                                <button type="button" class="btn btn-danger" @onclick="@(() => DeleteAdventure.InvokeAsync(Adventure))"
                                        data-toggle="tooltip" title="Edit @Adventure.Title">
                                    <span class="oi oi-trash" aria-hidden="true" />
                                </button>

                            </div>
                        }
                    }

                </Authorized>
            </AuthorizeView>

        </div>
    </div>

</div>

@code {

    #region ##### HEAD #####

    [Parameter] public string ContextString { get; set; }
    [Parameter] public Adventure Adventure { get; set; }
    [Parameter] public EventCallback<Adventure> DeleteAdventure { get; set; }
    [Parameter] public EventCallback<int> DeleteFromLibrary { get; set; }

    private string _UserEmail = "";

    #endregion

    #region ##### LIFECYCLE METHODS #####

    protected override async Task OnInitializedAsync()
    {
        //TODO: ugly.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _UserEmail = authState.User.Identity.Name;
    }

    #endregion

    #region ##### CRUD METHODS #####

    private async Task AddToLibrary()
    {
        UserFavourite userFavourite = new UserFavourite()
        {
            UserID = _UserEmail,
            AdventureID = Adventure.ID
        };

        try
        {
            await userFavouriteRepository.CreateUserFavourite(userFavourite);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ADC001: Unable Add Adventure to Library.");
        }

        toastService.ShowInfo("Adventure has been added to library.");
}

    #endregion

    #region ##### NAVIGATION #####

    private void NavPlay()
    {
        navigationManager.NavigateTo($"play/{Adventure.ID}");
    }

    private void NavAdventureDetails()
    {
        navigationManager.NavigateTo($"details/{Adventure.ID}");
    }

    private void NavEditProject()
    {
        navigationManager.NavigateTo($"editproject/{Adventure.ID}");
    }

    #endregion

}
