@page "/editchapter/{ChapterID:int}"

@inject IChapterRepository chapterRepository
@inject ILinkRepository linkRepository

@inject NavigationManager navigationManager

@attribute [Authorize]

@if (_Chapter != null)
{
    @* TITLE *@
    <h3>Edit Chapter</h3>

    <div class="row">

        @* LEFT COLUMN *@
        <div class="left-column">
            <ChapterForm Chapter="_Chapter" OnValidSubmit="SaveChapter" Back="NavEditProject"/>
        </div>

        @* RIGHT COLUMN *@
        <div class="right-column">
            <div class="form-group">

                @* LINK LIST *@
                @foreach (var link in _Links)
                {
                    <div class="d-flex">

                        @* EDIT LINK BUTTON *@
                        <button class="btn btn-warning flex-grow-1 mb-2" @onclick="@(() => NavEditLink(link.ID))">Edit @link.Description</button>

                        @* DELETE LINK BUTTON *@
                        <button class="btn btn-danger ml-2 mb-2" @onclick="(() => DeleteLink(link.ID))"><span class="oi oi-trash" aria-hidden="true"></span></button>

                    </div>
                }

                @* CREATE LINK BUTTON *@
                <a class="btn btn-info btn-block" @onclick="NavCreateLink">Create New Link</a>

            </div>
        </div>

    </div>
}

@code {

    #region ##### HEAD #####

    [Parameter] public int ChapterID { get; set; }

    public Chapter _Chapter;
    public List<Link> _Links;

    #endregion

    #region ##### LIFECYCLE METHODS #####

    protected async override Task OnInitializedAsync()
    {
        await GetChapter();
        await GetLinks();
    }

    #endregion

    #region ##### CRUD METHODS #####

    private async Task GetChapter()
    {
        try
        {
            _Chapter = await chapterRepository.GetChapter(ChapterID);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ECH001: Unable to Retrieve Chapter.");
        }
    }

    private async Task GetLinks()
    {
        try
        {
            _Links = await linkRepository.GetLinks(ChapterID);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ECH002: Unable to Retrieve Links.");
        }
    }

    private async Task SaveChapter()
    {
        try
        {
            await chapterRepository.UpdateChapter(_Chapter);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ECH003: Unable to Save Chapter.");
        }
    }

    private async Task DeleteLink(int id)
    {
        try
        {
            await linkRepository.DeleteLink(id);
            await GetLinks();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetBaseException().ToString());
            Console.WriteLine("ECH002: Unable to Delete Link.");
        }
    }

    #endregion

    #region ##### NAVIGATION #####

    private void NavCreateLink()
    {
        navigationManager.NavigateTo($"createlink/{_Chapter.AdventureID}/{_Chapter.ID}");
    }

    private void NavEditLink(int id)
    {
        navigationManager.NavigateTo($"editlink/{_Chapter.AdventureID}/{id}");
    }

    private void NavEditProject()
    {
        navigationManager.NavigateTo($"editproject/{_Chapter.AdventureID}");
    }

    #endregion

}
