<EditForm Model="Project" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />

    @* PROJECT TITLE *@
    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Project.Title" />
            <ValidationMessage For="@(() => Project.Title)" />
        </div>
    </div>

    @* PROJECT GENRES *@
    <div class="form-group">
        <label>Genres:</label>
        <div>
            <MultipleSelector Selected="Selected" NotSelected="NotSelected"/>
        </div>
    </div>

    @* PROJECT IMAGE *@
    <UploadImage Label="Main Image:" OnSelectedImage="OnSelectedImage" ImageURL="imageURL" />

    @* PROJECT DESCRIPTION *@
    <div class="form-group">
        <label>Description:</label>
        <div>
            <InputTextArea class="form-control" @bind-Value="@Project.Description" />
            <ValidationMessage For="@(() => Project.Description)" />
        </div>
    </div>

    @* PROJECT DESCRIPTION *@
    @*<div class="form-group form-markdown">
            <InputMarkdown Label="Description" For="@(() => Project.Description)" @bind-Value="@Project.Description" />
        </div>*@

    <button class="btn btn-success" type="submit">Save Project</button>
</EditForm>

@code {
    [Parameter] public Adventure Project { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Genre> NotSelectedGenres { get; set; } = new List<Genre>();
    [Parameter] public List<Genre> SelectedGenres { get; set; } = new List<Genre>();

    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();

    string imageURL;

    protected override void OnInitialized()
    {
        NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorModel(x.ID.ToString(), x.Name)).ToList();
        Selected = SelectedGenres.Select(x => new MultipleSelectorModel(x.ID.ToString(), x.Name)).ToList();

        if (!string.IsNullOrEmpty(Project.Image))
        {
            imageURL = Project.Image;
            Project.Image = null; /*Stops the image from being sent if hasn't been changed*/
        }
    }

    private void OnSelectedImage(string imageBase64)
    {
        Project.Image = imageBase64;
    }

    private async Task OnDataAnnotationsValidated()
    {
        Project.AdventureGenres = Selected
            .Select(x => new AdventureGenre { GenreID = int.Parse(x.Key) }).ToList();

        if(!string.IsNullOrWhiteSpace(Project.Image)) 
        { 
            imageURL = null; 
        }

        await OnValidSubmit.InvokeAsync(null);
    }
}
